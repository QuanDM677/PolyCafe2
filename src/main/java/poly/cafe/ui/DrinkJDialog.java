/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.cafe.ui;

import java.util.List;
import javax.swing.table.DefaultTableModel;
import poly.cafe.dao.CategoryDAO;
import poly.cafe.dao.DrinkDAO;
import poly.cafe.dao.impl.BillDetailDAOImpl;
import poly.cafe.dao.impl.CategoryDAOImpl;
import poly.cafe.dao.impl.DrinkDAOImpl;
import poly.cafe.entity.Bill;
import poly.cafe.entity.BillDetail;
import poly.cafe.entity.Category;
import poly.cafe.entity.Drink;
import poly.cafe.util.XDialog;

/**
 *
 * @author PC
 */
public class DrinkJDialog extends javax.swing.JDialog implements DrinkController {

    private Bill bill;

    public void setBill(Bill bill) {
        this.bill = bill;
    }

    /**
     * Creates new form DrinkJDialog
     */
    public DrinkJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDrinks = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Loại đồ uống"
            }
        ));
        tblCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoriesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCategories);

        tblDrinks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã", "Tên đồ uống", "Đơn giá", "Giảm giá"
            }
        ));
        tblDrinks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDrinksMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDrinks);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoriesMouseClicked
        this.fillDrinks();
    }//GEN-LAST:event_tblCategoriesMouseClicked

    private void tblDrinksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDrinksMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            this.addDrinkToBill();
        }
    }//GEN-LAST:event_tblDrinksMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    CategoryDAO categoryDao = new CategoryDAOImpl();
    List<Category> categories = List.of();
    DrinkDAO drinkDao = new DrinkDAOImpl();
    List<Drink> drinks = List.of();

    public void open() {
        this.setLocationRelativeTo(null);
        this.fillCategories();
        this.fillDrinks();
    }

    // Đoạn 1: Sửa fillCategories để kiểm tra categories rỗng trước khi setRowSelectionInterval
    public void fillCategories() {
        categories = categoryDao.findAll();
        DefaultTableModel model = (DefaultTableModel) tblCategories.getModel();
        model.setRowCount(0);
        categories.forEach(d -> model.addRow(new Object[]{d.getName()}));
        if (!categories.isEmpty()) { // Sửa tại đây
            tblCategories.setRowSelectionInterval(0, 0);
        }
    }

// Đoạn 2: Sửa fillDrinks để kiểm tra categories rỗng và chỉ số dòng hợp lệ
    // SỬA: Khi fillDrinks, chỉ hiển thị đồ uống còn hàng (isAvailable)
    public void fillDrinks() {
        if (categories.isEmpty()) {
            return;
        }
        int catRow = tblCategories.getSelectedRow();
        if (catRow < 0 || catRow >= categories.size()) {
            return;
        }
        Category category = categories.get(catRow);
        drinks = drinkDao.findByCategoryId(category.getId());
        DefaultTableModel model = (DefaultTableModel) tblDrinks.getModel();
        model.setRowCount(0);
        // SỬA: chỉ add đồ uống còn hàng (isAvailable)
        drinks.stream()
                .filter(Drink::isAvailable)
                .forEach(d -> {
                    Object[] row = {
                        d.getId(),
                        d.getName(),
                        String.format("$%.1f", d.getUnitPrice()),
                        String.format("%.0f%%", d.getDiscount() * 100)
                    };
                    model.addRow(row);
                });
    }

// Đoạn 3: Sửa addDrinkToBill để kiểm tra bill, bill.getId() và chỉ số dòng hợp lệ
    public void addDrinkToBill() {
        int drinkRow = tblDrinks.getSelectedRow();
        if (bill == null || bill.getId() == null) {
            XDialog.alert("Phiếu chưa được tạo hoặc không hợp lệ!");
            return;
        }
        if (drinks.isEmpty() || drinkRow < 0 || drinkRow >= drinks.size()) {
            XDialog.alert("Vui lòng chọn đồ uống!");
            return;
        }
        String quantity = XDialog.prompt("Số lượng?");
        if (quantity != null && quantity.length() > 0) {
            try {
                int qty = Integer.parseInt(quantity);
                if (qty < 1) {
                    throw new NumberFormatException();
                }
                Drink drink = drinks.get(drinkRow);
                BillDetail detail = new BillDetail();
                detail.setBillId(bill.getId());
                detail.setDiscount(drink.getDiscount());
                detail.setDrinkId(drink.getId());
                detail.setQuantity(qty);
                detail.setUnitPrice(drink.getUnitPrice());
                new BillDetailDAOImpl().create(detail);
                XDialog.alert("Đã thêm đồ uống vào phiếu!");
                this.dispose(); // <--- Thêm dòng này để tự đóng dialog!
            } catch (NumberFormatException ex) {
                XDialog.alert("Số lượng phải là số nguyên dương!");
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrinkJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrinkJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrinkJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrinkJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DrinkJDialog dialog = new DrinkJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCategories;
    private javax.swing.JTable tblDrinks;
    // End of variables declaration//GEN-END:variables
}
